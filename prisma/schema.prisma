// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId String @unique
  name    String
  email   String
  image   String

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessagesIds String[]  @db.ObjectId
  seenMessages    Message[] @relation("Seen", fields: [seenMessagesIds], references: [id])

  messagesId String[]  @db.ObjectId
  messages   Message[]

  voteSessionIds String[]      @db.ObjectId
  voteSessions   VoteSession[]

  memberOfVoteSessionsIds String[]      @db.ObjectId
  memberOfVoteSessions    VoteSession[] @relation("VoteSessionMember", fields: [voteSessionIds], references: [id])

  voteSessionVotesIds String[]          @db.ObjectId
  voteSessionVotes    VoteSessionVote[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Conversation {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  inviteCode String  @unique

  messageIds    String[]  @db.ObjectId
  messages      Message[]
  lastMessageAt DateTime  @default(now())

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])

  voteSessionIds String[]      @db.ObjectId
  voteSessions   VoteSession[]

  createdAt DateTime @default(now())
}

model Message {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  body   String?
  image  String?
  isVote Boolean @default(false)

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  voteSessionId String?      @db.ObjectId
  voteSession   VoteSession?

  createdAt DateTime @default(now())
}

model TMDBMovie {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  overview     String
  popularity   Float
  poster_path  String
  release_date DateTime
  title        String
  video        Boolean
  vote_average Float
  vote_count   Int
  VoteSession  VoteSession[]
}

enum VoteStatus {
  INITIATED
  OPTIONS
  ROUND_ONE
  ROUND_TWO
  FINISHED
}

model VoteSessionVote {
  id     String    @id @default(auto()) @map("_id") @db.ObjectId
  round  Int
  votes  Boolean[]
  superD Int

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  voteSessionId String      @db.ObjectId
  voteSession   VoteSession @relation(fields: [voteSessionId], references: [id])
}

model VoteSession {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  status VoteStatus @default(INITIATED)

  messageId String  @unique @db.ObjectId
  message   Message @relation(fields: [messageId], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  membersId String[] @db.ObjectId
  members   User[]   @relation("VoteSessionMember", fields: [membersId], references: [id])

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  platforms String[]
  genres    Int[]

  voteSessionVotesId String[]          @db.ObjectId
  voteSessionVotes   VoteSessionVote[]

  winnerId String?    @db.ObjectId
  winner   TMDBMovie? @relation(fields: [winnerId], references: [id], onDelete: Cascade)
}
